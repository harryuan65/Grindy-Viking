# timestamp: 2023-01-04T09:19:02+08:00

# question: [Number of Islands](https:/leetcode.com/problems/number-of-islands)
# train of thought
TRAIN_OF_THOUGHT = <<DOC.freeze
  找局部範圍直覺是想到 BFS，也就是用一個 queue 去放「待會繼續檢查的座標」，右下左上其中一個方向可以走把座標先放進去。
  如果島長得像 J 就是會需要往回走跟往上走，所以四個方向都要檢查。
DOC

# code goes here
# @param {Character[][]} grid
# @return {Integer}
def num_islands(grid)
  count = 0
  0.upto(grid.size-1) do |i|
    0.upto(grid[0].size-1) do |j|
      if grid[i][j] == "1"
        count += find_all_connected(grid, i, j)
      end
    end
  end
  count
end

def find_all_connected(grid, i, j)
  queue = [[i,j]]

  while queue.any?
    tile = queue.shift
    t_i, t_j = tile
    grid[t_i][t_j] = "2" # mark as visited
    if t_j < grid[t_i].size - 1 && grid[t_i][t_j+1]=="1"
      queue << [t_i, t_j+1]
    end
    # >
    if t_i < grid.size - 1 && grid[t_i+1][t_j]=="1"
      queue << [t_i+1, t_j]
    end
    # V
    if t_i < grid.size - 1 && grid[t_i+1][t_j]=="1"
      queue << [t_i+1, t_j]
    end
    # <
    if t_j > 0 && grid[t_i][t_j-1]=="1"
      queue << [t_i, t_j-1]
    end
    # ^
    if t_i > 0 && grid[t_i-1][t_j]=="1"
      queue << [t_i-1, t_j]
    end
  end
  1
end

<<~NOTE
邏輯是對的...但是這個 case 會 Time-limit exceeded.
[["1","1","1","1","1","0","1","1","1","1","1","1","1","1","1","0","1","0","1","1"],
["0","1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","0"],
["1","0","1","1","1","0","0","1","1","0","1","1","1","1","1","1","1","1","1","1"],
["1","1","1","1","0","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],
["1","0","0","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],
["1","0","1","1","1","1","1","1","0","1","1","1","0","1","1","1","0","1","1","1"],
["0","1","1","1","1","1","1","1","1","1","1","1","0","1","1","0","1","1","1","1"],
["1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","0","1","1"],
["1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","1","1","1","1"],
["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],
["0","1","1","1","1","1","1","1","0","1","1","1","1","1","1","1","1","1","1","1"],
["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],
["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],
["1","1","1","1","1","0","1","1","1","1","1","1","1","0","1","1","1","1","1","1"],
["1","0","1","1","1","1","1","0","1","1","1","0","1","1","1","1","0","1","1","1"],
["1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","1","0"],
["1","1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","0","0"],
["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],
["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],
["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"]]
NOTE